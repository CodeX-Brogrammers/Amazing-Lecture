from random import choice, shuffle
from typing import Callable, Optional
from os import getenv
import logging
import json

from aioalice import Dispatcher, get_new_configured_app
from aioalice.dispatcher.storage import MemoryStorage
from aioalice.types import AliceRequest, Button
from aiohttp.web_request import Request
from beanie import PydanticObjectId
from aiohttp import web

from state import State, SessionState, GameStates
from answer_checker import check_user_answer
import filters
import models

# Blank:
# - –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
# - —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞
# - —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã
# - Session state –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
# - –ü–æ–≤—Ç–æ—Ä–∏ –æ—Ç–≤–µ—Ç—ã

WEBHOOK_URL_PATH = '/post'  # webhook endpoint

WEBAPP_HOST = getenv("APP_ADDRESS", "localhost")
WEBAPP_PORT = 5000

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)

OK_Button = Button('–õ–∞–¥–Ω–æ')
REJECT_Button = Button('–ù–µ—Ç')
REPEAT_Button = Button('–ü–æ–≤—Ç–æ—Ä–∏')
BUTTONS = [OK_Button, REJECT_Button, REPEAT_Button]

POSSIBLE_ANSWER = ("–ù–∞—á–∏–Ω–∞–µ–º ?", "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å ?", "–ü–æ–µ—Ö–∞–ª–∏ ?")
CONTINUE_ANSWER = ("–ü—Ä–æ–¥–æ–ª–∂–∏–º ?", "–ï–¥–µ–º –¥–∞–ª—å—à–µ ?")
FACT_ANSWER = ("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ?",)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏


dp = Dispatcher(storage=MemoryStorage())
app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_URL_PATH)


def can_repeat(func: Callable):
    async def wrapper(alice: AliceRequest, *args, **kwargs):
        await dp.storage.set_data(alice.session.user_id, {"last": func})
        return await func(alice, *args, **kwargs)

    return wrapper


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
@dp.request_handler(filters.RepeatFilter(), state=None)
async def handle_repeat(alice_request: AliceRequest):
    handler = (await dp.storage.get_data(alice_request.session.user_id)).get("last", lambda: None)
    logging.info(f"User: {alice_request.session.user_id}: Handler->Repeat->{handler.__name__}")
    return await handler(alice_request)


@dp.request_handler(filters.StartFilter(), state=None)
@can_repeat
async def handle_start(alice: AliceRequest):
    logging.info(f"Handler->–°—Ç–∞—Ä—Ç")
    await dp.storage.set_state(alice.session.user_id, GameStates.START)
    answer = "–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ —Å–≤–æ–µ–π –ª–µ–∫—Ü–∏–∏. " \
             "–Ø –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –ê–≤—Ä–æ—Ä–∞ –•–∏—Å—Ç–æ—Ä–∏—è. " \
             "–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –µ—Å–ª–∏ —Å–∫–∞–∂–∏—Ç–µ \"–ü–æ–º–æ—â—å\" –∏ \"–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?\"" \
             "–Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –≤–∞–º–∏ –æ —Ç–æ–º, –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π —Å–∫–∞–∑–∫–æ–π. " \
             "–ß—Ç–æ –µ—Å–ª–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞—Å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∏—Ä —Ñ–∞–Ω—Ç–∞–∑–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–π? " \
             "–Ø —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ –Ω–∞—à –≤–æ–ª—à–µ–±–Ω—ã–π –ø–æ–µ–∑–¥. –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? "
    return alice.response(answer, buttons=BUTTONS)
    
    # TODO: –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å" –¥–æ –∏–≥—Ä—ã
# TODO: —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥
@dp.request_handler(commands=["—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"], state="*")
@can_repeat
async def handle_can_do(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å")
    answer = "–ù–∞–≤—ã–∫ –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. " \
             "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–µ—Ä–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–∑. " \
             "–£ –≤–∞—Å –µ—Å—Ç—å  –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."
    state = await dp.storage.get_state(alice.session.user_id)
    if state in ("DEFAULT_STATE", "*"):
        answer = f"{answer}\n{choice(POSSIBLE_ANSWER)}"
    return alice.response(answer)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –¥–æ –∏–≥—Ä—ã
@dp.request_handler(filters.HelpFilter(), state="*")
@can_repeat
async def handle_help(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–º–æ—â—å")
    answer = "–ù–∞–≤—ã–∫ \"–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–µ–∫—Ü–∏—è\" –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ." \
             "–ü—Ä–æ–¥–≤–∏–≥–∞—è—Å—å –≤—Å–µ –¥–∞–ª—å—à–µ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã." \
             "–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –î—Ä–µ–≤–Ω–µ–≥–æ –†–∏–º–∞, –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è," \
             " –≠–ø–æ—Ö–∏ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –ê–≤—Ä–æ—Ä–æ–π –•–∏—Å—Ç–æ—Ä–∏–µ–π."
    state = await dp.storage.get_state(alice.session.user_id)
    if state in ("DEFAULT_STATE", "*"):
        answer = f"{answer}\n{choice(POSSIBLE_ANSWER)}"
    return alice.response(answer)


@dp.request_handler(filters.ConfirmFilter(), state=GameStates.START)
async def handle_start_game(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    return await handler_question(alice)


# –û—Ç–∫–∞–∑ –æ—Ç –∏–≥—Ä—ã –∏ –≤—ã—Ö–æ–¥
@dp.request_handler(filters.RejectFilter(), state=GameStates.START)
async def handle_reject_game(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã")
    answer = "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å –≤–∞—Å –Ω–∞ –º–æ–µ–π –ª–µ–∫—Ü–∏–∏. –ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ—á–∞—â–µ, –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞."
    return alice.response(answer, end_session=True)


@dp.request_handler(state=GameStates.QUESTION_TIME)
async def handler_question(alice: AliceRequest):
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    # TODO: —á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ø—É–ª–ª–∞ –ø–æ—Å–ª–µ –∏—Ö –ø—Ä–æ—Ö–æ–¥–µ–Ω–∏—è
    # |-> –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ ID –≤ State
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    logging.info(f"User: {alice.session.user_id}: Handler->–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")

    await dp.storage.set_state(alice.session.user_id, state=GameStates.GUESS_ANSWER)

    data = await models.Question.aggregate([{"$sample": {"size": 1}}]).to_list()
    if len(data) == 0:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        return alice.response("–ü–æ—Ö–æ–∂–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üôÉ")
    question: models.Question = models.Question.parse_obj(data[0])
    state = State.from_request(alice)
    state.session.current_question = str(question.id)

    answers = question.answers
    shuffle(answers)
    answers = [(index, answer) for index, answer in enumerate(answers, 1)]
    text = "\n".join((
        question.full_text.src, "\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:",
        *[f"{i}: {answer.text.src}" for i, answer in answers]
    ))
    tts = "\n".join((
        question.full_text.tts, "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:",
        *[f"{i}-–π {answer.text.tts}" for i, answer in answers]
    ))

    buttons = [Button(title=answer.text.src, payload={"is_true": answer.is_true, "number": i})
               for i, answer in answers]
    state.session.current_answers = [(i, answer.text.src) for i, answer in answers]
    state.session.current_true_answer = [i for i, answer in answers if answer.is_true][0]
    return alice.response(
        text,
        tts=tts,
        session_state=state.session.dict(),
        buttons=buttons
    )


@dp.request_handler(state=GameStates.GUESS_ANSWER)
async def handler_quess_answer(alice: AliceRequest):
    is_true_answer, diff = check_user_answer(alice)
    if is_true_answer:
        return await handler_true_answer(alice)
    return await handler_false_answer(alice, diff)


async def handler_true_answer(alice: AliceRequest):
    # –ü–æ–ª—É—á–∏—Ç—å ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ State-–∞
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–≥–∞–¥–∞–ª –æ—Ç–≤–µ—Ç")
    state = State.from_request(alice)
    state.user.score += 1

    state.session.passed_questions.append(
        state.session.current_question
    )
    await dp.storage.set_state(alice.session.user_id, state=GameStates.FACT)
    session = state.session
    answer_text = session.current_answers[session.current_true_answer - 1][1]
    question = await models.Question.get(PydanticObjectId(session.current_question))
    answer = [answer for answer in question.answers if answer.text.src == answer_text][0]
    fact_text = choice(FACT_ANSWER)
    state.session.current_question = None
    return alice.response(
        "\n".join((answer.description.src, fact_text)),
        tts="\n".join((answer.description.tts, fact_text)),
        user_state_update=state.user.dict()
    )


async def handler_false_answer(alice: AliceRequest, diff: Optional[models.Diff]):
    # –ü–æ–ª—É—á–∏—Ç—å ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ State-–∞
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è
    logging.info(f"User: {alice.session.user_id}: Handler->–ù–µ –æ—Ç–≥–∞–¥–∞–ª –æ—Ç–≤–µ—Ç")
    if diff is None:
        return alice.response("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")

    await dp.storage.set_state(alice.session.user_id, state=GameStates.HINT)
    state = State.from_request(alice)
    question = await models.Question.get(state.session.current_question)
    answer = [answer for answer in question.answers if answer.text.src == diff.answer][0]
    return alice.response(
        "\n".join((answer.description.src, "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É ?")),
        tts="\n".join((answer.description.tts, "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É ?"))
    )


@dp.request_handler(filters.ConfirmFilter(), state=GameStates.FACT)
async def handler_fact_confirm(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Ç–∞")
    state = State.from_request(alice)
    question_id = state.session.current_question
    question = await models.Question.get(PydanticObjectId(question_id))

    continue_answer = choice(CONTINUE_ANSWER)
    state.session.current_question = None
    state.session.passed_questions.append(question_id)
    await dp.storage.set_state(alice.session.user_id, state=GameStates.QUESTION_TIME)
    return alice.response(
        "\n".join((question.fact.src, continue_answer)),
        tts="\n".join((question.fact.tts, continue_answer)),
        session_state=state.session.dict()
    )


@dp.request_handler(filters.RejectFilter(), state=GameStates.FACT)
async def handler_fact_reject(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–∫–∞–∑ –æ—Ç —Ñ–∞–∫—Ç–∞")
    return await handler_question(alice)


@dp.request_handler(filters.ConfirmFilter(), state=GameStates.HINT)
async def handler_hint(alice: AliceRequest):
    # –ü–æ–ª—É—á–∏—Ç—å ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ State-–∞
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤, –¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    # –ò–Ω–∞—á–µ –Ω–µ –¥–∞–µ–º
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —É–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    await dp.storage.set_state(alice.session.user_id, state=GameStates.GUESS_ANSWER)
    state = State.from_request(alice)
    question_id = state.session.current_question
    question = await models.Question.get(PydanticObjectId(question_id))
    return alice.response(
        "\n".join(("–ü–æ–¥—Å–∫–∞–∑–∫–∞:", question.hint.src)),
        tts="\n".join(("–ü–æ–¥—Å–∫–∞–∑–∫–∞:", question.hint.tts))
    )


@dp.request_handler(filters.RejectFilter(), state=GameStates.HINT)
async def handler_hint(alice: AliceRequest):
    logging.info(f"User: {alice.session.user_id}: Handler->–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏")
    return await handler_fact_confirm(alice)


# TODO: 
# 1. –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –∞–∫–∞ "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏"
@dp.request_handler(state=None)
async def handle_intent(alice_request: AliceRequest):
    data = alice_request.request.nlu._raw_kwargs
    answer = f"Intents: {data['intents']}\nTokens: {data['tokens']}"
    return alice_request.response(answer, tts='–î–ê<speaker audio="alice-sounds-things-explosion-1.opus">')


@dp.errors_handler()
async def the_only_errors_handler(alice, e):
    logging.error('An error!', exc_info=e)
    return alice.response('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@web.middleware
async def log_middleware(request: Request, handler):
    data = await request.json()
    _request = data["request"]
    logging.info(
        f"User ({data['session']['user_id']}) enter"
        f"\nCommand: {_request.get('command', None)}"
        f"\nToken: {_request['nlu']['tokens']}"
    )
    response = await handler(request)
    logging.info("User exit")
    return response


@web.middleware
async def session_state_middleware(request, handler):
    response = await handler(request)
    data = (await request.json())["state"]["session"]
    state = SessionState.parse_obj(data).dict()
    body = json.loads(response.body)
    body["session_state"] = state | body["session_state"]
    response.body = json.dumps(body)
    return response


if __name__ == '__main__':
    app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_URL_PATH)
    app.on_startup.append(models.init_database)
    app.middlewares.extend((log_middleware, session_state_middleware))
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT, loop=dp.loop)
